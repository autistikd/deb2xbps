#!/bin/sh
set -euo pipefail


# Path initialization
XDEB_PKGROOT="$(realpath -m "${XDEB_PKGROOT:-$(pwd)}")"
XDEB_WORKDIR="$(realpath -m "${XDEB_WORKDIR:-${XDEB_PKGROOT}/workdir}")"
XDEB_DESTDIR="$(realpath -m "${XDEB_DESTDIR:-${XDEB_PKGROOT}/destdir}")"
XDEB_DATADIR="$(realpath -m "${XDEB_DATADIR:-${XDEB_PKGROOT}/datadir}")"
XDEB_BINPKGS="$(realpath -m "${XDEB_BINPKGS:-${XDEB_PKGROOT}/binpkgs}")"
XDEB_SHLIBS="$(realpath -m "${XDEB_SHLIBS:-${XDEB_PKGROOT}/shlibs}")"


# Default options
XDEB_OPT_DEPS="${XDEB_OPT_DEPS:-false}"
XDEB_OPT_SYNC="${XDEB_OPT_SYNC:-false}"
XDEB_OPT_QUIT="${XDEB_OPT_QUIT:-false}"
XDEB_OPT_EXTRACT="${XDEB_OPT_EXTRACT:-true}"
XDEB_OPT_INSTALL="${XDEB_OPT_INSTALL:-false}"
XDEB_OPT_CLEAN_DIR="${XDEB_OPT_CLEAN_DIR:-false}"
XDEB_OPT_FIX_CONFLICT="${XDEB_OPT_FIX_CONFLICT:-false}"
XDEB_OPT_WARN_CONFLICT="${XDEB_OPT_WARN_CONFLICT:-true}"
XDEB_REFUSE=false
XDEB_SUFFIX=""


# Logging functions
log_info() { printf "\033[1;36mI\033[0m %s\033[0m\n" "$*"; }
log_warn() { printf "\033[1;33mW\033[0m %s\033[0m\n" "$*"; }
log_crit() { printf "\033[1;31mE\033[0;1m %s\033[0m\n" "$*"; XDEB_REFUSE=true; }


# shlibs synchronization
sync_shlibs() {
	curl -sf "https://raw.githubusercontent.com/void-linux/void-packages/master/common/shlibs" \
		-o "$XDEB_SHLIBS" || {
		log_crit "Failed to sync shlibs."
		exit 1
	}
	log_info "shlibs synced"
}


# Cleanup functions
clean() {
	rm -f "$XDEB_BINPKGS"/.xbps-pkg-*
	rm -rf "$XDEB_WORKDIR" "$XDEB_DATADIR" "$XDEB_DESTDIR"
}

clean_repodata() {
	rm -rf "$XDEB_BINPKGS"/*-repodata
}

clean_all() {
	clean
	clean_repodata
	rm -rf "$XDEB_BINPKGS" "$XDEB_SHLIBS"
}


# Automatic dependency generation
genrdeps() {
	find "$XDEB_DESTDIR" -type f | while read -r f; do
		[ "$(head -c 4 "$f" | tr -d '\0')" = "$(printf '\177ELF')" ] || continue
		objdump -p "$f" | grep NEEDED | awk '{print $2}'
	done | sort -u | while read -r lib; do
		[ -n "$(find "$XDEB_DESTDIR" -name "$lib")" ] && continue
		rdep=$(grep -E -m1 "^${lib//+/\\+}[[:blank:]]+" "$XDEB_SHLIBS" | cut -d ' ' -f2)
		[ -z "$rdep" ] && { log_warn "Missing dependency for $lib"; continue; }
		echo "$rdep" | grep -qwF "${XDEB_NOT_DEPENDENCIES}" && continue
		echo "${rdep%-*}${XDEB_SUFFIX}>=${rdep##*-}"
	done | sort -u | tr '\n' ' '
}


# File conflict resolution
fix_conflict() {
	[ ! -e "$XDEB_DESTDIR/$1" ] || [ ! -d "$XDEB_DESTDIR/$1" ] && return 1
	mkdir -p "$XDEB_DESTDIR/$2"
	cp -rT "$XDEB_DESTDIR/$1" "$XDEB_DESTDIR/${2}/${3:-$1}"
	rm -rf "$XDEB_DESTDIR/$1"
	log_info "Moved conflict '$1' -> '${2}/${3:-$1}'"
}


# Command availability check
check_command() {
	command -v "$1" > /dev/null 2>&1 || {
		log_crit "Executable '$1' from package '${2:-$1}' not found."
		exit 1
	}
}


# Usage information
usage() {
	cat << EOF
Usage: xdeb [options] file.deb
Options:
  -d      Enable automatic dependency resolution
  -S      Sync the shlibs file from Void Linux repo
  -c      Partial clean (except binpkgs and shlibs)
  -C      Full clean (remove all generated data)
  -r      Remove repodata files
  -q      Extract deb file only (no build)
  -b      Build from destdir without extracting deb
  -e      Remove empty directories from destdir
  -m      Append -32bit suffix to package name
  -i      Do not warn about conflicts
  -f      Automatically resolve file conflicts
  -I      Install built package automatically
  --help  Show this help message
Examples:
  xdeb -Cq package.deb
  xdeb -Sd package.deb
EOF
	exit "$1"
}


# Main execution block
check_command xz
check_command tar
check_command curl
check_command ar binutils
check_command objdump binutils
check_command xbps-rindex xbps
check_command xbps-create xbps

mkdir -p "$XDEB_PKGROOT"

while [ "$#" -ne 0 ]; do
	case "$1" in
		--deps=*) XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES}${1#*=} ";;
		--arch=*) archs="${1#*=}";;
		--name=*) pkgname="${1#*=}";;
		--version=*) version="${1#*=}";;
		--not-deps=*) XDEB_NOT_DEPENDENCIES="${XDEB_NOT_DEPENDENCIES}${1#*=} ";;
		--revision=*|--rev=*) revision="${1#*=}";;
		--help|-h) usage 0;;
		--*) log_crit "Invalid option '$1'"; usage 1;;
		-*)
			flag="${1#-}"
			while [ -n "$flag" ]; do
				case "$flag" in
					S) sync_shlibs;;
					d) XDEB_OPT_DEPS=true;;
					c) clean;;
					C) clean_all;;
					r) clean_repodata;;
					q) XDEB_OPT_QUIT=true;;
					b) XDEB_OPT_EXTRACT=false;;
					e) XDEB_OPT_CLEAN_DIR=true;;
					m) XDEB_SUFFIX="-32bit";;
					i) XDEB_OPT_WARN_CONFLICT=false;;
					f) XDEB_OPT_FIX_CONFLICT=true;;
					I) XDEB_OPT_INSTALL=true;;
					*) log_crit "Unknown flag -$flag"; usage 1;;
				esac
				flag="${flag#?}"
			done
			;;
		*) [ "$#" -eq 1 ] && XDEB_BASEPKG="$1";;
	esac
	shift

done


# Extraction phase
if [ "$XDEB_OPT_EXTRACT" = true ]; then
	[ -z "${XDEB_BASEPKG##*.deb}" ] && [ -r "$XDEB_BASEPKG" ] || {
		log_crit "Invalid or missing .deb file"
		exit 1
	}
	clean
	mkdir -p "$XDEB_BINPKGS" "$XDEB_DATADIR" "$XDEB_DESTDIR" "$XDEB_WORKDIR"
	ar -xf "$XDEB_BASEPKG" --output "$XDEB_WORKDIR"
	tar -xf "$XDEB_WORKDIR"/control.* -C "$XDEB_DATADIR"
	tar -xf "$XDEB_WORKDIR"/data.* -C "$XDEB_DESTDIR"
	log_info "Deb package extracted"
fi

[ "$XDEB_OPT_QUIT" = true ] && {
	log_info "Quit requested, exiting before build"
	exit 0
}


# Metadata resolution
revision="${revision:-1}"
pkgname="${pkgname:-$(grep -Po -m1 "Package:[ \t]*\K.*" "$XDEB_DATADIR/control")}"
version="${version:-$(grep -Po -m1 "Version:[ \t]*\K.*" "$XDEB_DATADIR/control")}"
license=$(grep -Po -m1 "License:[ \t]*\K.*" "$XDEB_DATADIR/control" || echo "Unknown")
maintainer=$(grep -Po -m1 "Maintainer:[ \t]*\K.*" "$XDEB_DATADIR/control" || echo "Unknown")
short_desc=$(grep -Po -m1 "Description:[ \t]*\K.*" "$XDEB_DATADIR/control")
long_desc=$(grep -Po -m1 -z "Description:[ \t\n]*\K.*" "$XDEB_DATADIR/control" | tr '\0' '\n')
archs="${archs:-$(grep -Po -m1 "Architecture:[ \t]*\K.*" "$XDEB_DATADIR/control")}"

pkgname="${pkgname}${XDEB_SUFFIX}"
short_desc="${short_desc:-$long_desc}"
long_desc="${long_desc:-$short_desc}"

version=$(echo "$version" | grep -Po "^(\d|\.)*")
case "$archs" in
	amd64) archs="x86_64";;
	arm64) archs="aarch64";;
	armhf) archs="armv7l";;
	i386) archs="i686";;
	all) archs="noarch";;
	*) log_crit "Invalid arch: $archs"; exit 1;;
esac

[ "$XDEB_OPT_DEPS" = true ] && XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES}$(genrdeps)"
XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES% }"
[ -n "$XDEB_DEPENDENCIES" ] && log_info "Dependencies resolved: $XDEB_DEPENDENCIES"


# Conflict resolution and cleanup
[ "$XDEB_OPT_FIX_CONFLICT" = true ] && {
	fix_conflict bin usr
	fix_conflict lib usr
	fix_conflict lib32 usr
	fix_conflict lib64 usr
	fix_conflict sbin usr bin
	fix_conflict usr/sbin usr bin
	fix_conflict usr/lib64 usr lib
}


# Build package
cd "$XDEB_BINPKGS"
out="${pkgname}-${version}_${revision}"
xbps-create -q -A "$archs" -n "$out" -m "$maintainer" -s "$short_desc" -S "$long_desc" -l "$license" -D "$XDEB_DEPENDENCIES" "$XDEB_DESTDIR"
xbps-rindex -a "$out.${archs}.xbps"


# Final step: install or advise
if [ "$XDEB_REFUSE" = true ]; then
	log_crit "Errors occurred. Do not install the package."
	exit 1
elif [ "$XDEB_OPT_INSTALL" = true ]; then
	"$(command -v sudo doas 2>/dev/null | head -n1)" xbps-install -R "$XDEB_BINPKGS" "$out"
else
	log_info "Install with: sudo xbps-install -R $XDEB_BINPKGS $out"
fi
